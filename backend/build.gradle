plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id 'org.graalvm.buildtools.native' version "${nativeVersion}"
}

group = 'com.sidutti.charlie'
version = '24.8.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

graalvmNative {

    binaries.configureEach {
        javaLauncher.set(javaToolchains.launcherFor {
            // Compile with native-image from GraalVM for JDK21
            languageVersion.set(JavaLanguageVersion.of(22))

        })
    }
    toolchainDetection = true
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    implementation 'org.apache.lucene:lucene-core:9.11.1'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
    implementation('org.springframework.ai:spring-ai-elasticsearch-store-spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    implementation "dev.langchain4j:langchain4j:${lang4jVersion}"
    implementation "dev.langchain4j:langchain4j-document-parser-apache-tika:${tikaParser}"
    implementation "org.apache.james:apache-mime4j-core:${mime4j}"
    implementation "org.apache.commons:commons-compress:${commonsCompress}"
    implementation "org.apache.commons:commons-text:${commonsVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
